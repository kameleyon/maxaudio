{"version":3,"file":"index-BaAYT_bX.js","sources":["../../node_modules/react/cjs/react-jsx-runtime.production.min.js","../../node_modules/react-dom/client.js","../../node_modules/@clerk/clerk-react/dist/esm/polyfills.js","../../src/contexts/ThemeContext.tsx","../../src/contexts/UsageNotificationContext.tsx","../../node_modules/@stripe/stripe-js/dist/index.mjs","../../src/services/stripe.service.ts","../../src/components/common/Toast.tsx","../../src/contexts/ToastContext.tsx","../../src/components/notifications/UsageNotifications.tsx","../../src/main.tsx"],"sourcesContent":["/**\n * @license React\n * react-jsx-runtime.production.min.js\n *\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n'use strict';var f=require(\"react\"),k=Symbol.for(\"react.element\"),l=Symbol.for(\"react.fragment\"),m=Object.prototype.hasOwnProperty,n=f.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,p={key:!0,ref:!0,__self:!0,__source:!0};\nfunction q(c,a,g){var b,d={},e=null,h=null;void 0!==g&&(e=\"\"+g);void 0!==a.key&&(e=\"\"+a.key);void 0!==a.ref&&(h=a.ref);for(b in a)m.call(a,b)&&!p.hasOwnProperty(b)&&(d[b]=a[b]);if(c&&c.defaultProps)for(b in a=c.defaultProps,a)void 0===d[b]&&(d[b]=a[b]);return{$$typeof:k,type:c,key:e,ref:h,props:d,_owner:n.current}}exports.Fragment=l;exports.jsx=q;exports.jsxs=q;\n","'use strict';\n\nvar m = require('react-dom');\nif (process.env.NODE_ENV === 'production') {\n  exports.createRoot = m.createRoot;\n  exports.hydrateRoot = m.hydrateRoot;\n} else {\n  var i = m.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;\n  exports.createRoot = function(c, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.createRoot(c, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n  exports.hydrateRoot = function(c, h, o) {\n    i.usingClientEntryPoint = true;\n    try {\n      return m.hydrateRoot(c, h, o);\n    } finally {\n      i.usingClientEntryPoint = false;\n    }\n  };\n}\n","if (typeof window !== \"undefined\" && !window.global) {\n  window.global = typeof global === \"undefined\" ? window : global;\n}\n//# sourceMappingURL=polyfills.js.map","import React, { createContext, useContext, useState, useEffect } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: React.ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(() => {\n    const savedTheme = localStorage.getItem('theme');\n    return (savedTheme as Theme) || 'dark';\n  });\n\n  useEffect(() => {\n    localStorage.setItem('theme', theme);\n    document.documentElement.classList.toggle('dark', theme === 'dark');\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === 'dark' ? 'light' : 'dark');\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}","import React, { createContext, useContext, useState, useEffect } from 'react'\nimport { useUsageStats } from '../hooks/useUsageStats'\nimport { notificationService, type UsageNotification } from '../services/notification.service'\nimport { useNotificationPreferences } from '../hooks/useNotificationPreferences'\n\ninterface UsageNotificationContextType {\n  notifications: UsageNotification[]\n  unreadCount: number\n  addNotification: (notification: Omit<UsageNotification, 'id' | 'timestamp' | 'read'>) => void\n  removeNotification: (id: string) => void\n  clearNotifications: () => void\n  markAllAsRead: () => void\n  markAsRead: (id: string) => void\n}\n\nconst UsageNotificationContext = createContext<UsageNotificationContextType | undefined>(undefined)\n\n// Sound effects for notifications\nconst NOTIFICATION_SOUNDS = {\n  error: new Audio('/sounds/error.mp3'),\n  warning: new Audio('/sounds/warning.mp3'),\n  success: new Audio('/sounds/success.mp3'),\n  info: new Audio('/sounds/info.mp3')\n}\n\nexport function UsageNotificationProvider({ children }: { children: React.ReactNode }) {\n  const [notifications, setNotifications] = useState<UsageNotification[]>(() => \n    notificationService.getStoredNotifications()\n  )\n  const { stats } = useUsageStats()\n  const {\n    isCategoryEnabled,\n    shouldPlaySound,\n    getPersistenceDuration\n  } = useNotificationPreferences()\n\n  // Calculate unread count\n  const unreadCount = notifications.filter(n => !n.read).length\n\n  // Store notifications when they change\n  useEffect(() => {\n    notificationService.storeNotifications(\n      notifications.filter(n => n.persistent)\n    )\n  }, [notifications])\n\n  const addNotification = (notification: Omit<UsageNotification, 'id' | 'timestamp' | 'read'>) => {\n    // Check if the category is enabled\n    if (!isCategoryEnabled(notification.category)) {\n      return\n    }\n\n    const id = Math.random().toString(36).substr(2, 9)\n    const newNotification = {\n      ...notification,\n      id,\n      timestamp: Date.now(),\n      read: false\n    }\n\n    setNotifications(prev => [newNotification, ...prev])\n\n    // Play sound if enabled\n    if (shouldPlaySound() && notification.type in NOTIFICATION_SOUNDS) {\n      NOTIFICATION_SOUNDS[notification.type as keyof typeof NOTIFICATION_SOUNDS]\n        .play()\n        .catch(err => console.error('Error playing notification sound:', err))\n    }\n  }\n\n  const removeNotification = (id: string) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id))\n  }\n\n  const clearNotifications = () => {\n    setNotifications(prev => prev.filter(n => n.persistent))\n  }\n\n  const markAsRead = (id: string) => {\n    setNotifications(prev => \n      prev.map(notification => \n        notification.id === id \n          ? { ...notification, read: true }\n          : notification\n      )\n    )\n  }\n\n  const markAllAsRead = () => {\n    setNotifications(prev => \n      prev.map(notification => ({ ...notification, read: true }))\n    )\n  }\n\n  // Check usage limits and add warnings\n  useEffect(() => {\n    if (!stats) return\n\n    // Character usage warnings\n    const characterUsagePercent = (stats.current.charactersUsed / stats.limits.charactersPerMonth) * 100\n    if (characterUsagePercent >= 75) {\n      const notification = notificationService.createUsageNotification(\n        characterUsagePercent >= 90 ? 'error' : 'warning',\n        'characters',\n        characterUsagePercent\n      )\n      addNotification(notification)\n    }\n\n    // Voice clone warnings\n    const cloneUsagePercent = (stats.current.voiceClones / stats.limits.voiceClones) * 100\n    if (cloneUsagePercent >= 75) {\n      const notification = notificationService.createUsageNotification(\n        cloneUsagePercent >= 90 ? 'error' : 'warning',\n        'voice_clones',\n        cloneUsagePercent\n      )\n      addNotification(notification)\n    }\n\n    // Rate limit warnings\n    const rateUsagePercent = (stats.current.requestsThisMinute / stats.limits.requestsPerMinute) * 100\n    if (rateUsagePercent >= 90) {\n      const notification = notificationService.createUsageNotification(\n        'warning',\n        'api_requests',\n        rateUsagePercent\n      )\n      addNotification(notification)\n    }\n  }, [stats])\n\n  // Clean up old notifications based on persistence duration\n  useEffect(() => {\n    const interval = setInterval(() => {\n      const now = Date.now()\n      const persistenceDuration = getPersistenceDuration()\n      setNotifications(prev => \n        prev.filter(notification => \n          notification.persistent || \n          now - notification.timestamp < persistenceDuration\n        )\n      )\n    }, 60000) // Check every minute\n\n    return () => clearInterval(interval)\n  }, [getPersistenceDuration])\n\n  return (\n    <UsageNotificationContext.Provider\n      value={{\n        notifications,\n        unreadCount,\n        addNotification,\n        removeNotification,\n        clearNotifications,\n        markAsRead,\n        markAllAsRead\n      }}\n    >\n      {children}\n    </UsageNotificationContext.Provider>\n  )\n}\n\nexport function useUsageNotifications() {\n  const context = useContext(UsageNotificationContext)\n  if (context === undefined) {\n    throw new Error('useUsageNotifications must be used within a UsageNotificationProvider')\n  }\n  return context\n}\n","var V3_URL = 'https://js.stripe.com/v3';\nvar V3_URL_REGEX = /^https:\\/\\/js\\.stripe\\.com\\/v3\\/?(\\?.*)?$/;\nvar EXISTING_SCRIPT_MESSAGE = 'loadStripe.setLoadParameters was called but an existing Stripe.js script already exists in the document; existing script parameters will be used';\nvar findScript = function findScript() {\n  var scripts = document.querySelectorAll(\"script[src^=\\\"\".concat(V3_URL, \"\\\"]\"));\n\n  for (var i = 0; i < scripts.length; i++) {\n    var script = scripts[i];\n\n    if (!V3_URL_REGEX.test(script.src)) {\n      continue;\n    }\n\n    return script;\n  }\n\n  return null;\n};\n\nvar injectScript = function injectScript(params) {\n  var queryString = params && !params.advancedFraudSignals ? '?advancedFraudSignals=false' : '';\n  var script = document.createElement('script');\n  script.src = \"\".concat(V3_URL).concat(queryString);\n  var headOrBody = document.head || document.body;\n\n  if (!headOrBody) {\n    throw new Error('Expected document.body not to be null. Stripe.js requires a <body> element.');\n  }\n\n  headOrBody.appendChild(script);\n  return script;\n};\n\nvar registerWrapper = function registerWrapper(stripe, startTime) {\n  if (!stripe || !stripe._registerWrapper) {\n    return;\n  }\n\n  stripe._registerWrapper({\n    name: 'stripe-js',\n    version: \"4.8.0\",\n    startTime: startTime\n  });\n};\n\nvar stripePromise = null;\nvar onErrorListener = null;\nvar onLoadListener = null;\n\nvar onError = function onError(reject) {\n  return function () {\n    reject(new Error('Failed to load Stripe.js'));\n  };\n};\n\nvar onLoad = function onLoad(resolve, reject) {\n  return function () {\n    if (window.Stripe) {\n      resolve(window.Stripe);\n    } else {\n      reject(new Error('Stripe.js not available'));\n    }\n  };\n};\n\nvar loadScript = function loadScript(params) {\n  // Ensure that we only attempt to load Stripe.js at most once\n  if (stripePromise !== null) {\n    return stripePromise;\n  }\n\n  stripePromise = new Promise(function (resolve, reject) {\n    if (typeof window === 'undefined' || typeof document === 'undefined') {\n      // Resolve to null when imported server side. This makes the module\n      // safe to import in an isomorphic code base.\n      resolve(null);\n      return;\n    }\n\n    if (window.Stripe && params) {\n      console.warn(EXISTING_SCRIPT_MESSAGE);\n    }\n\n    if (window.Stripe) {\n      resolve(window.Stripe);\n      return;\n    }\n\n    try {\n      var script = findScript();\n\n      if (script && params) {\n        console.warn(EXISTING_SCRIPT_MESSAGE);\n      } else if (!script) {\n        script = injectScript(params);\n      } else if (script && onLoadListener !== null && onErrorListener !== null) {\n        var _script$parentNode;\n\n        // remove event listeners\n        script.removeEventListener('load', onLoadListener);\n        script.removeEventListener('error', onErrorListener); // if script exists, but we are reloading due to an error,\n        // reload script to trigger 'load' event\n\n        (_script$parentNode = script.parentNode) === null || _script$parentNode === void 0 ? void 0 : _script$parentNode.removeChild(script);\n        script = injectScript(params);\n      }\n\n      onLoadListener = onLoad(resolve, reject);\n      onErrorListener = onError(reject);\n      script.addEventListener('load', onLoadListener);\n      script.addEventListener('error', onErrorListener);\n    } catch (error) {\n      reject(error);\n      return;\n    }\n  }); // Resets stripePromise on error\n\n  return stripePromise[\"catch\"](function (error) {\n    stripePromise = null;\n    return Promise.reject(error);\n  });\n};\nvar initStripe = function initStripe(maybeStripe, args, startTime) {\n  if (maybeStripe === null) {\n    return null;\n  }\n\n  var stripe = maybeStripe.apply(undefined, args);\n  registerWrapper(stripe, startTime);\n  return stripe;\n}; // eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\n\nvar stripePromise$1;\nvar loadCalled = false;\n\nvar getStripePromise = function getStripePromise() {\n  if (stripePromise$1) {\n    return stripePromise$1;\n  }\n\n  stripePromise$1 = loadScript(null)[\"catch\"](function (error) {\n    // clear cache on error\n    stripePromise$1 = null;\n    return Promise.reject(error);\n  });\n  return stripePromise$1;\n}; // Execute our own script injection after a tick to give users time to do their\n// own script injection.\n\n\nPromise.resolve().then(function () {\n  return getStripePromise();\n})[\"catch\"](function (error) {\n  if (!loadCalled) {\n    console.warn(error);\n  }\n});\nvar loadStripe = function loadStripe() {\n  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n    args[_key] = arguments[_key];\n  }\n\n  loadCalled = true;\n  var startTime = Date.now(); // if previous attempts are unsuccessful, will re-load script\n\n  return getStripePromise().then(function (maybeStripe) {\n    return initStripe(maybeStripe, args, startTime);\n  });\n};\n\nexport { loadStripe };\n","import { loadStripe } from '@stripe/stripe-js'\nimport type { Stripe } from '@stripe/stripe-js'\nimport axios from 'axios'\n\n// Initialize Stripe\nconst stripePromise = loadStripe(import.meta.env.VITE_STRIPE_PUBLISHABLE_KEY)\n\ninterface CreateCheckoutSessionParams {\n  priceId: string\n  successUrl: string\n  cancelUrl: string\n  customerId?: string\n  clientReferenceId?: string\n}\n\ninterface CreatePortalSessionParams {\n  customerId: string\n  returnUrl: string\n}\n\nclass StripeService {\n  private baseUrl = '/api/stripe'\n\n  // Get Stripe instance\n  async getStripe(): Promise<Stripe | null> {\n    return await stripePromise\n  }\n\n  // Create a checkout session for new subscriptions\n  async createCheckoutSession(params: CreateCheckoutSessionParams): Promise<{ sessionId: string }> {\n    try {\n      const response = await axios.post(`${this.baseUrl}/create-checkout-session`, params)\n      return response.data\n    } catch (error) {\n      console.error('Failed to create checkout session:', error)\n      throw new Error('Failed to create checkout session')\n    }\n  }\n\n  // Create a portal session for managing existing subscriptions\n  async createPortalSession(params: CreatePortalSessionParams): Promise<{ url: string }> {\n    try {\n      const response = await axios.post(`${this.baseUrl}/create-portal-session`, params)\n      return response.data\n    } catch (error) {\n      console.error('Failed to create portal session:', error)\n      throw new Error('Failed to create portal session')\n    }\n  }\n\n  // Redirect to Stripe Checkout\n  async redirectToCheckout(params: CreateCheckoutSessionParams): Promise<void> {\n    try {\n      const stripe = await this.getStripe()\n      if (!stripe) throw new Error('Stripe not initialized')\n\n      const { sessionId } = await this.createCheckoutSession(params)\n      const { error } = await stripe.redirectToCheckout({ sessionId })\n\n      if (error) {\n        throw error\n      }\n    } catch (error) {\n      console.error('Failed to redirect to checkout:', error)\n      throw error\n    }\n  }\n\n  // Redirect to Customer Portal\n  async redirectToPortal(params: CreatePortalSessionParams): Promise<void> {\n    try {\n      const { url } = await this.createPortalSession(params)\n      window.location.href = url\n    } catch (error) {\n      console.error('Failed to redirect to portal:', error)\n      throw error\n    }\n  }\n\n  // Update subscription\n  async updateSubscription(subscriptionId: string, params: {\n    priceId: string\n    quantity?: number\n  }): Promise<void> {\n    try {\n      await axios.post(`${this.baseUrl}/update-subscription`, {\n        subscriptionId,\n        ...params\n      })\n    } catch (error) {\n      console.error('Failed to update subscription:', error)\n      throw new Error('Failed to update subscription')\n    }\n  }\n\n  // Cancel subscription\n  async cancelSubscription(subscriptionId: string, cancelAtPeriodEnd: boolean = true): Promise<void> {\n    try {\n      await axios.post(`${this.baseUrl}/cancel-subscription`, {\n        subscriptionId,\n        cancelAtPeriodEnd\n      })\n    } catch (error) {\n      console.error('Failed to cancel subscription:', error)\n      throw new Error('Failed to cancel subscription')\n    }\n  }\n\n  // Resume subscription\n  async resumeSubscription(subscriptionId: string): Promise<void> {\n    try {\n      await axios.post(`${this.baseUrl}/resume-subscription`, {\n        subscriptionId\n      })\n    } catch (error) {\n      console.error('Failed to resume subscription:', error)\n      throw new Error('Failed to resume subscription')\n    }\n  }\n\n  // Get subscription details\n  async getSubscription(subscriptionId: string): Promise<any> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/subscription/${subscriptionId}`)\n      return response.data\n    } catch (error) {\n      console.error('Failed to get subscription:', error)\n      throw new Error('Failed to get subscription details')\n    }\n  }\n\n  // Get customer's payment methods\n  async getPaymentMethods(customerId: string): Promise<any[]> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/payment-methods/${customerId}`)\n      return response.data\n    } catch (error) {\n      console.error('Failed to get payment methods:', error)\n      throw new Error('Failed to get payment methods')\n    }\n  }\n\n  // Update default payment method\n  async updateDefaultPaymentMethod(customerId: string, paymentMethodId: string): Promise<void> {\n    try {\n      await axios.post(`${this.baseUrl}/update-payment-method`, {\n        customerId,\n        paymentMethodId\n      })\n    } catch (error) {\n      console.error('Failed to update payment method:', error)\n      throw new Error('Failed to update payment method')\n    }\n  }\n\n  // Get upcoming invoice\n  async getUpcomingInvoice(subscriptionId: string, newPriceId?: string): Promise<any> {\n    try {\n      const response = await axios.get(`${this.baseUrl}/upcoming-invoice`, {\n        params: {\n          subscriptionId,\n          newPriceId\n        }\n      })\n      return response.data\n    } catch (error) {\n      console.error('Failed to get upcoming invoice:', error)\n      throw new Error('Failed to get upcoming invoice')\n    }\n  }\n}\n\nexport const stripeService = new StripeService()\n","import { useState, useEffect } from 'react'\nimport { createPortal } from 'react-dom'\nimport { AlertCircle, CheckCircle, XCircle, Info, X } from 'lucide-react'\n\nexport type ToastType = 'success' | 'error' | 'info' | 'warning'\n\ninterface Toast {\n  id: string\n  message: string\n  type: ToastType\n  duration?: number\n}\n\ninterface ToastProps {\n  toast: Toast\n  onClose: (id: string) => void\n}\n\nfunction ToastComponent({ toast, onClose }: ToastProps) {\n  const [isExiting, setIsExiting] = useState(false)\n\n  useEffect(() => {\n    if (toast.duration) {\n      const timer = setTimeout(() => {\n        setIsExiting(true)\n      }, toast.duration - 300) // Start exit animation before removal\n\n      const removeTimer = setTimeout(() => {\n        onClose(toast.id)\n      }, toast.duration)\n\n      return () => {\n        clearTimeout(timer)\n        clearTimeout(removeTimer)\n      }\n    }\n  }, [toast, onClose])\n\n  const getIcon = () => {\n    switch (toast.type) {\n      case 'success':\n        return <CheckCircle className=\"w-5 h-5 text-green-400\" />\n      case 'error':\n        return <XCircle className=\"w-5 h-5 text-red-400\" />\n      case 'warning':\n        return <AlertCircle className=\"w-5 h-5 text-yellow-400\" />\n      default:\n        return <Info className=\"w-5 h-5 text-blue-400\" />\n    }\n  }\n\n  const getBgColor = () => {\n    switch (toast.type) {\n      case 'success':\n        return 'bg-green-500/10 border-green-500/20'\n      case 'error':\n        return 'bg-red-500/10 border-red-500/20'\n      case 'warning':\n        return 'bg-yellow-500/10 border-yellow-500/20'\n      default:\n        return 'bg-blue-500/10 border-blue-500/20'\n    }\n  }\n\n  return (\n    <div\n      className={`flex items-start gap-3 p-4 rounded-lg border shadow-lg ${getBgColor()} ${\n        isExiting ? 'animate-slide-out' : 'animate-slide-in'\n      }`}\n    >\n      {getIcon()}\n      <p className=\"text-sm text-white/90 flex-1\">{toast.message}</p>\n      <button\n        onClick={() => setIsExiting(true)}\n        className=\"p-1 hover:bg-white/10 rounded-full transition-colors\"\n      >\n        <X className=\"w-4 h-4 text-white/40\" />\n      </button>\n    </div>\n  )\n}\n\ninterface ToastContainerProps {\n  toasts: Toast[]\n  onClose: (id: string) => void\n}\n\nexport function ToastContainer({ toasts, onClose }: ToastContainerProps) {\n  return createPortal(\n    <div className=\"fixed bottom-4 right-4 z-50 flex flex-col gap-2 max-w-md w-full\">\n      {toasts.map(toast => (\n        <ToastComponent key={toast.id} toast={toast} onClose={onClose} />\n      ))}\n    </div>,\n    document.body\n  )\n}\n\n// Add animation keyframes to your global CSS\nconst styles = `\n@keyframes slide-in {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n@keyframes slide-out {\n  from {\n    transform: translateX(0);\n    opacity: 1;\n  }\n  to {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n}\n\n.animate-slide-in {\n  animation: slide-in 0.3s ease-out forwards;\n}\n\n.animate-slide-out {\n  animation: slide-out 0.3s ease-in forwards;\n}\n`\n\n// Create a style element and append it to the document head\nconst styleSheet = document.createElement('style')\nstyleSheet.textContent = styles\ndocument.head.appendChild(styleSheet)\n","import React, { createContext, useContext, useState, useCallback } from 'react'\nimport { ToastContainer, type ToastType } from '../components/common/Toast'\n\ninterface Toast {\n  id: string\n  message: string\n  type: ToastType\n  duration?: number\n}\n\ninterface ToastContextType {\n  showToast: (message: string, type: ToastType, duration?: number) => void\n}\n\nconst ToastContext = createContext<ToastContextType | undefined>(undefined)\n\nexport function ToastProvider({ children }: { children: React.ReactNode }) {\n  const [toasts, setToasts] = useState<Toast[]>([])\n\n  const showToast = useCallback((message: string, type: ToastType, duration: number = 5000) => {\n    const id = Math.random().toString(36).substr(2, 9)\n    setToasts(prev => [...prev, { id, message, type, duration }])\n  }, [])\n\n  const handleClose = useCallback((id: string) => {\n    setToasts(prev => prev.filter(toast => toast.id !== id))\n  }, [])\n\n  return (\n    <ToastContext.Provider value={{ showToast }}>\n      {children}\n      <ToastContainer toasts={toasts} onClose={handleClose} />\n    </ToastContext.Provider>\n  )\n}\n\nexport function useToast() {\n  const context = useContext(ToastContext)\n  if (context === undefined) {\n    throw new Error('useToast must be used within a ToastProvider')\n  }\n  return context\n}\n\n// Helper functions for common toast types\nexport function useToastHelpers() {\n  const { showToast } = useToast()\n\n  return {\n    success: (message: string, duration?: number) => \n      showToast(message, 'success', duration),\n    \n    error: (message: string, duration?: number) => \n      showToast(message, 'error', duration),\n    \n    warning: (message: string, duration?: number) => \n      showToast(message, 'warning', duration),\n    \n    info: (message: string, duration?: number) => \n      showToast(message, 'info', duration)\n  }\n}\n","import { AlertTriangle, X, AlertCircle, Bell, CreditCard, Activity, ChevronRight } from 'lucide-react'\nimport { useUsageNotifications } from '../../contexts/UsageNotificationContext'\nimport { useEffect, useRef, useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport type { UsageNotification } from '../../services/notification.service'\n\n// Sound effects for notifications\nconst NOTIFICATION_SOUNDS = {\n  error: new Audio('/sounds/error.mp3'),\n  warning: new Audio('/sounds/warning.mp3'),\n  success: new Audio('/sounds/success.mp3')\n}\n\nconst MAX_VISIBLE_NOTIFICATIONS = 5\n\nexport function UsageNotifications() {\n  const { notifications, removeNotification } = useUsageNotifications()\n  const previousCount = useRef(notifications.length)\n\n  // Group notifications by category\n  const groupedNotifications = useMemo(() => {\n    const sorted = [...notifications].sort((a, b) => b.timestamp - a.timestamp)\n    const visible = sorted.slice(0, MAX_VISIBLE_NOTIFICATIONS)\n    const grouped = visible.reduce((acc, notification) => {\n      const category = notification.category\n      if (!acc[category]) {\n        acc[category] = []\n      }\n      acc[category].push(notification)\n      return acc\n    }, {} as Record<string, UsageNotification[]>)\n\n    // Sort categories by priority\n    const categoryOrder = ['error', 'warning', 'subscription', 'usage', 'system']\n    return Object.entries(grouped).sort((a, b) => {\n      const aIndex = categoryOrder.indexOf(a[0])\n      const bIndex = categoryOrder.indexOf(b[0])\n      return aIndex - bIndex\n    })\n  }, [notifications])\n\n  // Play sound when new notifications arrive\n  useEffect(() => {\n    if (notifications.length > previousCount.current) {\n      const latestNotification = notifications[notifications.length - 1]\n      if (latestNotification.type in NOTIFICATION_SOUNDS) {\n        NOTIFICATION_SOUNDS[latestNotification.type as keyof typeof NOTIFICATION_SOUNDS]\n          .play()\n          .catch(err => console.error('Error playing notification sound:', err))\n      }\n    }\n    previousCount.current = notifications.length\n  }, [notifications])\n\n  if (notifications.length === 0) return null\n\n  const getIcon = (notification: UsageNotification) => {\n    switch (notification.category) {\n      case 'subscription':\n        return <CreditCard className={`w-5 h-5 ${getIconColor(notification.type)}`} />\n      case 'usage':\n        return <Activity className={`w-5 h-5 ${getIconColor(notification.type)}`} />\n      case 'system':\n        return <Bell className={`w-5 h-5 ${getIconColor(notification.type)}`} />\n      default:\n        return notification.type === 'error' \n          ? <AlertCircle className={`w-5 h-5 ${getIconColor(notification.type)}`} />\n          : <AlertTriangle className={`w-5 h-5 ${getIconColor(notification.type)}`} />\n    }\n  }\n\n  const getIconColor = (type: string) => {\n    switch (type) {\n      case 'error':\n        return 'text-red-400'\n      case 'warning':\n        return 'text-yellow-400'\n      case 'success':\n        return 'text-green-400'\n      default:\n        return 'text-blue-400'\n    }\n  }\n\n  const getBackgroundColor = (type: string) => {\n    switch (type) {\n      case 'error':\n        return 'bg-red-500/10 border-red-500/20'\n      case 'warning':\n        return 'bg-yellow-500/10 border-yellow-500/20'\n      case 'success':\n        return 'bg-green-500/10 border-green-500/20'\n      default:\n        return 'bg-blue-500/10 border-blue-500/20'\n    }\n  }\n\n  return (\n    <div className=\"fixed bottom-4 right-4 z-50 space-y-2 max-w-md w-full\">\n      {/* View All Link */}\n      {notifications.length > MAX_VISIBLE_NOTIFICATIONS && (\n        <Link\n          to=\"/notification-history\"\n          className=\"block text-sm text-white/60 hover:text-white/80 transition-colors text-right mb-2\"\n        >\n          View all notifications ({notifications.length})\n          <ChevronRight className=\"inline-block w-4 h-4 ml-1\" />\n        </Link>\n      )}\n\n      {/* Grouped Notifications */}\n      {groupedNotifications.map(([category, categoryNotifications]) => (\n        <div key={category} className=\"space-y-2\">\n          {categoryNotifications.map(notification => (\n            <div\n              key={notification.id}\n              className={`p-4 rounded-lg shadow-lg border animate-slide-in ${\n                getBackgroundColor(notification.type)\n              }`}\n            >\n              <div className=\"flex items-start gap-3\">\n                <div className=\"flex-shrink-0 pt-0.5\">\n                  {getIcon(notification)}\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className={`text-sm ${getIconColor(notification.type)}`}>\n                    {notification.message}\n                  </p>\n                  {notification.category === 'usage' && notification.percentage && (\n                    <div className=\"mt-2\">\n                      <div className=\"w-full bg-white/10 rounded-full h-1.5\">\n                        <div\n                          className={`rounded-full h-1.5 transition-all ${\n                            notification.percentage >= 90 \n                              ? 'bg-red-400' \n                              : notification.percentage >= 75 \n                                ? 'bg-yellow-400' \n                                : 'bg-[#63248d]'\n                          }`}\n                          style={{ width: `${notification.percentage}%` }}\n                        />\n                      </div>\n                    </div>\n                  )}\n                  {notification.persistent && (\n                    <p className=\"mt-1 text-xs text-white/40\">\n                      This notification will remain until addressed\n                    </p>\n                  )}\n                </div>\n                <div className=\"flex-shrink-0\">\n                  <button\n                    type=\"button\"\n                    className={`inline-flex rounded-md p-1.5 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-transparent ${\n                      getIconColor(notification.type)\n                    }`}\n                    onClick={() => removeNotification(notification.id)}\n                  >\n                    <span className=\"sr-only\">Dismiss</span>\n                    <X className=\"w-4 h-4\" />\n                  </button>\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\n// Add animation keyframes to your global CSS\nconst styles = `\n@keyframes slide-in {\n  from {\n    transform: translateX(100%);\n    opacity: 0;\n  }\n  to {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n\n.animate-slide-in {\n  animation: slide-in 0.3s ease-out forwards;\n}\n`\n\n// Create a style element and append it to the document head\nconst styleSheet = document.createElement('style')\nstyleSheet.textContent = styles\ndocument.head.appendChild(styleSheet)\n","import React from 'react'\nimport ReactDOM from 'react-dom/client'\nimport { ClerkProvider } from '@clerk/clerk-react'\nimport { BrowserRouter } from 'react-router-dom'\nimport { ThemeProvider } from './contexts/ThemeContext'\nimport App from './App'\nimport './index.css'\n\nconst CLERK_PUBLISHABLE_KEY = import.meta.env.VITE_CLERK_PUBLISHABLE_KEY\n\nif (!CLERK_PUBLISHABLE_KEY) {\n  throw new Error('Missing Clerk Publishable Key')\n}\n\nReactDOM.createRoot(document.getElementById('root')!).render(\n  <React.StrictMode>\n    <ClerkProvider \n      publishableKey={CLERK_PUBLISHABLE_KEY}\n      appearance={{\n        baseTheme: undefined,\n        variables: {\n          colorPrimary: '#63248d',\n          colorBackground: 'transparent',\n          colorText: 'white',\n          colorInputText: 'white',\n          colorInputBackground: 'rgba(255, 255, 255, 0.1)',\n        },\n        elements: {\n          formButtonPrimary: 'bg-primary hover:bg-primary/80',\n          card: 'bg-transparent',\n          headerTitle: 'text-white',\n          headerSubtitle: 'text-white/80',\n          socialButtonsBlockButton: 'bg-white/10 border-white/20 text-white hover:bg-white/20',\n          dividerLine: 'bg-white/20',\n          dividerText: 'text-white/60',\n          formFieldLabel: 'text-white/80',\n          formFieldInput: 'bg-white/10 border-white/20 text-white',\n          footerActionLink: 'text-primary hover:text-primary/80'\n        }\n      }}\n    >\n      <BrowserRouter>\n        <ThemeProvider>\n          <App />\n        </ThemeProvider>\n      </BrowserRouter>\n    </ClerkProvider>\n  </React.StrictMode>\n)\n"],"names":["f","require$$0","k","l","m","n","p","q","c","a","g","b","d","e","h","reactJsxRuntime_production_min","global","createContext","V3_URL","V3_URL_REGEX","EXISTING_SCRIPT_MESSAGE","findScript","scripts","i","script","injectScript","params","queryString","headOrBody","registerWrapper","stripe","startTime","stripePromise","onErrorListener","onLoadListener","onError","reject","onLoad","resolve","loadScript","_script$parentNode","error","initStripe","maybeStripe","args","stripePromise$1","loadCalled","getStripePromise","loadStripe","_len","_key","styles","styleSheet"],"mappings":"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","x_google_ignoreList":[0,1,2,5]}